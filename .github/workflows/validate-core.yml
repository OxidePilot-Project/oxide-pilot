name: validation-core

on:
  workflow_call:

permissions:
  contents: read
  issues: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check Rust formatting
        id: fmt
        run: cargo fmt --all -- --check
        continue-on-error: true

      - name: Save format check result
        if: failure()
        run: echo "format_failed=true" >> $GITHUB_ENV

  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Run Clippy
        id: clippy
        run: cargo clippy --workspace --all-targets --no-default-features --features "surrealdb-metrics" 2>&1 | tee clippy-output.txt

      - name: Upload Clippy logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: clippy-logs
          path: clippy-output.txt
          retention-days: 7

  unit-tests:
    name: Unit Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install dependencies (macOS only)
        if: matrix.os == 'macos-latest'
        run: brew install gtk+3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Run unit tests
        id: tests
        run: cargo test --workspace --no-default-features --features "surrealdb-metrics" -- --nocapture 2>&1 | tee test-output-${{ matrix.os }}.txt

      - name: Upload test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.os }}
          path: test-output-${{ matrix.os }}.txt
          retention-days: 7

  doc-tests:
    name: Doc Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Run doc tests
        id: doc_tests
        run: cargo test --doc --no-default-features --features "surrealdb-metrics"

  frontend-lint:
    name: Frontend Lint & Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src-frontend/package-lock.json

      - name: Install frontend deps
        run: |
          cd src-frontend
          npm ci

      - name: Lint frontend
        run: |
          cd src-frontend
          npm run lint || echo "Frontend lint warnings found, but continuing..."

      - name: Build frontend
        run: |
          cd src-frontend
          npm run build

  e2e-tests:
    name: Playwright E2E
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src-frontend/package-lock.json

      - name: Install frontend deps
        run: |
          cd src-frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd src-frontend
          npx playwright install --with-deps

      - name: Run Playwright smoke tests
        run: |
          cd src-frontend
          npm run test:e2e -- --reporter=list || echo "E2E tests failed, but continuing..."

      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: src-frontend/playwright-report
          retention-days: 7

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [format-check, lint-check, unit-tests, doc-tests, frontend-lint, e2e-tests]
    if: always()
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
        continue-on-error: true

      - name: Check validation status
        id: check
        run: |
          VALIDATION_FAILED=false

          if [[ "${{ needs.format-check.result }}" != "success" ]]; then
            VALIDATION_FAILED=true
            echo "format_check_failed=true" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.lint-check.result }}" != "success" ]]; then
            VALIDATION_FAILED=true
            echo "lint_check_failed=true" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            VALIDATION_FAILED=true
            echo "unit_tests_failed=true" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.doc-tests.result }}" != "success" ]]; then
            VALIDATION_FAILED=true
            echo "doc_tests_failed=true" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.frontend-lint.result }}" != "success" ]]; then
            VALIDATION_FAILED=true
            echo "frontend_lint_failed=true" >> $GITHUB_ENV
          fi

          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            VALIDATION_FAILED=true
            echo "e2e_tests_failed=true" >> $GITHUB_ENV
          fi

          echo "validation_failed=$VALIDATION_FAILED" >> $GITHUB_ENV

          if [[ "$VALIDATION_FAILED" == "true" ]]; then
            echo "::error::Validation failed - creating issue with logs"
            exit 1
          else
            echo "::notice::All validations passed successfully"
          fi

      - name: Create failure issue
        if: failure() && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let issueBody = `## Validation Pipeline Failed\n\n`;
            issueBody += `**Commit**: ${context.sha.substring(0, 7)}\n`;
            issueBody += `**Branch**: ${context.ref.replace('refs/heads/', '')}\n`;
            issueBody += `**Author**: @${context.actor}\n`;
            issueBody += `**Workflow Run**: [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n`;
            issueBody += `---\n\n`;
            issueBody += `### Test Results Summary\n\n`;
            issueBody += `| Job | Status |\n`;
            issueBody += `|-----|--------|\n`;
            issueBody += `| Format Check | ${'${{ needs.format-check.result }}' === 'success' ? 'PASS' : 'FAIL'} |\n`;
            issueBody += `| Lint Check | ${'${{ needs.lint-check.result }}' === 'success' ? 'PASS' : 'FAIL'} |\n`;
            issueBody += `| Unit Tests | ${'${{ needs.unit-tests.result }}' === 'success' ? 'PASS' : 'FAIL'} |\n`;
            issueBody += `| Doc Tests | ${'${{ needs.doc-tests.result }}' === 'success' ? 'PASS' : 'FAIL'} |\n`;
            issueBody += `| Frontend Lint & Build | ${'${{ needs.frontend-lint.result }}' === 'success' ? 'PASS' : 'FAIL'} |\n`;
            issueBody += `| E2E Tests | ${'${{ needs.e2e-tests.result }}' === 'success' ? 'PASS' : 'FAIL'} |\n\n`;
            issueBody += `### Error Logs\n\n`;

            const artifactsDir = 'artifacts';
            if (fs.existsSync(artifactsDir)) {
              const files = fs.readdirSync(artifactsDir, { withFileTypes: true });
              for (const dir of files) {
                if (dir.isDirectory()) {
                  const logFiles = fs.readdirSync(path.join(artifactsDir, dir.name));
                  for (const logFile of logFiles) {
                    const logPath = path.join(artifactsDir, dir.name, logFile);
                    if (fs.statSync(logPath).isFile()) {
                      const content = fs.readFileSync(logPath, 'utf8');
                      const truncated = content.length > 10000 ? content.substring(0, 10000) + '\n\n... (truncated)' : content;
                      issueBody += `#### ${dir.name}/${logFile}\n\n`;
                      issueBody += `\`\`\`\n${truncated}\n\`\`\`\n\n`;
                    }
                  }
                }
              }
            } else {
              issueBody += `_No logs available (artifacts not downloaded)_\n\n`;
            }

            issueBody += `---\n\n`;
            issueBody += `### Next Steps\n\n`;
            issueBody += `1. Review the error logs above\n`;
            issueBody += `2. Fix the failing tests or checks locally\n`;
            issueBody += `3. Run \`cargo fmt --all\`, \`cargo clippy\`, and \`cargo test\` before pushing\n`;
            issueBody += `4. Close this issue once fixed\n\n`;
            issueBody += `**Auto-generated by Validation Pipeline**`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Validation Failed - ${context.sha.substring(0, 7)} (${new Date().toISOString().split('T')[0]})`,
              body: issueBody,
              labels: ['validation-failure', 'ci/cd', 'bug']
            });
