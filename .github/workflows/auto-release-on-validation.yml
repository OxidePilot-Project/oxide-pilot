name: Auto Release on Validation Success

on:
  workflow_run:
    workflows: ["Validation Pipeline"]
    types: [completed]

permissions:
  contents: write
  issues: write
  checks: write
  actions: read

jobs:
  build-installers:
    name: Build installers for release
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src-frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-
            ${{ runner.os }}-cargo-

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Install NSIS & WiX
        run: |
          choco install nsis -y
          choco install wixtoolset -y

      - name: Generate icons (if logo.png exists)
        shell: pwsh
        run: |
          if (Test-Path logo.png) {
            Push-Location src-tauri
            python create_icon.py
            Pop-Location
          } else {
            Write-Host "logo.png not present; skipping icon generation"
          }

      - name: Install frontend dependencies
        run: |
          cd src-frontend
          npm ci

      - name: Build frontend
        run: |
          cd src-frontend
          npm run build

      - name: Build Tauri app (Release)
        run: |
          cd src-tauri
          cargo tauri build --verbose --features surrealdb-metrics
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Code sign installers
        shell: pwsh
        env:
          SIGN_PFX_BASE64: ${{ secrets.SIGN_PFX_BASE64 }}
          SIGN_PFX_PASSWORD: ${{ secrets.SIGN_PFX_PASSWORD }}
          SIGN_TS_URL: ${{ secrets.SIGN_TS_URL }}
        run: |
          if ($env:SIGN_PFX_BASE64) {
            $pfx = Join-Path $env:RUNNER_TEMP 'codesign.pfx'
            [IO.File]::WriteAllBytes($pfx, [Convert]::FromBase64String($env:SIGN_PFX_BASE64))
            $timestamp = if ($env:SIGN_TS_URL) { $env:SIGN_TS_URL } else { 'http://timestamp.digicert.com' }
            Write-Host "Signing binaries under src-tauri/target/release/bundle"
            Get-ChildItem -Path "src-tauri/target/release/bundle" -Include *.exe,*.msi -Recurse | ForEach-Object {
              Write-Host "Signing $($_.FullName)"
              signtool sign /f $pfx /p $env:SIGN_PFX_PASSWORD /tr $timestamp /td sha256 /fd sha256 $_.FullName
              if ($LASTEXITCODE -ne 0) {
                throw "Failed to sign $($_.FullName)"
              }
            }
            Write-Host "Code signing completed"
          } else {
            Write-Host "Code signing skipped: SIGN_PFX_BASE64 not configured"
          }

      - name: Generate checksums
        shell: pwsh
        run: |
          $bundleDir = "src-tauri/target/release/bundle"

          # SHA256 checksums
          $sha256File = Join-Path $bundleDir "CHECKSUMS-SHA256.txt"
          Get-ChildItem -Path $bundleDir -Include *.exe,*.msi -Recurse | ForEach-Object {
            $hash = (Get-FileHash -Algorithm SHA256 $_.FullName).Hash.ToLower()
            $name = $_.Name
            "$hash  $name" | Out-File -Append -Encoding utf8 $sha256File
          }

          # SHA512 checksums
          $sha512File = Join-Path $bundleDir "CHECKSUMS-SHA512.txt"
          Get-ChildItem -Path $bundleDir -Include *.exe,*.msi -Recurse | ForEach-Object {
            $hash = (Get-FileHash -Algorithm SHA512 $_.FullName).Hash.ToLower()
            $name = $_.Name
            "$hash  $name" | Out-File -Append -Encoding utf8 $sha512File
          }

      - name: Upload installers as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: auto-release-installers
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/CHECKSUMS-*.txt
          retention-days: 7

  create-release:
    name: Create automated prerelease with installers
    needs: build-installers
    runs-on: ubuntu-latest
    steps:
      - name: Info
        run: |
          echo "Validation run id: ${{ github.event.workflow_run.id }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"

      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate tag and metadata
        id: meta
        run: |
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          SHORT=${{ github.event.workflow_run.head_sha }}
          SHORT=${SHORT:0:7}
          TAG="bootstrap-$TIMESTAMP-$SHORT"
          VERSION="$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "body=Automated prerelease created after Validation Pipeline passed on main.\nValidation run: ${{ github.event.workflow_run.html_url }}\nCommit: ${{ github.event.workflow_run.head_sha }}\n\n## Installation\nDownload the Windows installer below. Checksums are provided for verification." >> $GITHUB_OUTPUT

      - name: Download installers
        uses: actions/download-artifact@v4
        with:
          name: auto-release-installers
          path: installers/

      - name: Create GitHub prerelease with installers
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.version }}
          body: ${{ steps.meta.outputs.body }}
          draft: false
          prerelease: true
          files: |
            installers/**/*
        env:
          # Prefer an explicit PAT with repo scope for reliability; fall back to GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Comment on commit (record release)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ steps.meta.outputs.tag }}'
            const runId = context.payload.workflow_run.id
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.payload.workflow_run.head_sha,
              body: `Automated prerelease **${tag}** created with installers after successful validation (run ${runId}).`
            })
