name: Automated Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
      - 'bootstrap-*'

permissions:
  contents: write

jobs:
  build-and-release-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Install NSIS & WiX
        run: |
          choco install nsis -y
          choco install wixtoolset -y

      - name: Generate icons (if src-tauri/icon.png exists)
        shell: pwsh
        run: |
          if (Test-Path src-tauri/icon.png) {
            cd src-tauri
            python create_icon.py
            cd ..
          } else {
            echo "icon.png not present; skipping icon generation"
          }

      - name: Build frontend
        run: |
          npm --prefix src-frontend ci
          npm --prefix src-frontend run build

      - name: Tauri bundle (NSIS/MSI)
        run: |
          cd src-tauri
          cargo tauri build --verbose

      - name: Collect artifacts
        id: collect
        shell: pwsh
        run: |
          echo "bundle_dir=src-tauri/target/release/bundle" >> $env:GITHUB_OUTPUT
          Get-ChildItem -Path src-tauri/target/release/bundle -Recurse

      # Code signing if secrets are provided
      - name: Code sign installers
        if: ${{ secrets.SIGN_PFX_BASE64 != '' }}
        shell: pwsh
        env:
          SIGN_PFX_BASE64: ${{ secrets.SIGN_PFX_BASE64 }}
          SIGN_PFX_PASSWORD: ${{ secrets.SIGN_PFX_PASSWORD }}
          SIGN_TS_URL: ${{ secrets.SIGN_TS_URL }}
          BUNDLE_DIR: ${{ steps.collect.outputs.bundle_dir }}
        run: |
          $pfx = Join-Path $env:RUNNER_TEMP 'codesign.pfx'
          [IO.File]::WriteAllBytes($pfx, [Convert]::FromBase64String($env:SIGN_PFX_BASE64))
          $ts = if ($env:SIGN_TS_URL) { $env:SIGN_TS_URL } else { 'http://timestamp.digicert.com' }
          Write-Host "Signing binaries under $env:BUNDLE_DIR"
          Get-ChildItem -Path $env:BUNDLE_DIR -Include *.exe,*.msi -Recurse | ForEach-Object {
            Write-Host "Signing $($_.FullName)"
            signtool sign /f $pfx /p $env:SIGN_PFX_PASSWORD /tr $ts /td sha256 /fd sha256 $_.FullName
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to sign $($_.FullName)"
              exit 1
            }
            Write-Host "âœ… Successfully signed $($_.Name)"
          }
          Write-Host "All files signed successfully"

      - name: Generate release tag
        id: tag
        shell: pwsh
        run: |
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $version = (Get-Content src-tauri/Cargo.toml | Select-String 'version = "(.+)"').Matches.Groups[1].Value
          $commitShort = git rev-parse --short HEAD

          # If triggered by tag, use it; otherwise generate bootstrap tag
          if ($env:GITHUB_REF -like "refs/tags/*") {
            $tag = $env:GITHUB_REF -replace "refs/tags/", ""
          } else {
            $tag = "bootstrap-$timestamp-$commitShort"
          }

          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Generated tag: $tag"

      - name: Generate checksums
        shell: pwsh
        run: |
          $bundleDir = "src-tauri/target/release/bundle"
          $checksumFile = Join-Path $bundleDir "CHECKSUMS.txt"

          # MD5 checksums
          $md5File = Join-Path $bundleDir "CHECKSUMS-md5.txt"
          Get-ChildItem -Path $bundleDir -Include *.exe,*.msi -Recurse | ForEach-Object {
            $hash = (Get-FileHash -Algorithm MD5 $_.FullName).Hash.ToLower()
            $relativePath = $_.FullName.Replace("$bundleDir\", "")
            "$hash  $relativePath" | Out-File -Append -Encoding utf8 $md5File
          }

          # SHA256 checksums
          $sha256File = Join-Path $bundleDir "CHECKSUMS-sha256.txt"
          Get-ChildItem -Path $bundleDir -Include *.exe,*.msi -Recurse | ForEach-Object {
            $hash = (Get-FileHash -Algorithm SHA256 $_.FullName).Hash.ToLower()
            $relativePath = $_.FullName.Replace("$bundleDir\", "")
            "$hash  $relativePath" | Out-File -Append -Encoding utf8 $sha256File
          }

          # SHA512 checksums
          $sha512File = Join-Path $bundleDir "CHECKSUMS-sha512.txt"
          Get-ChildItem -Path $bundleDir -Include *.exe,*.msi -Recurse | ForEach-Object {
            $hash = (Get-FileHash -Algorithm SHA512 $_.FullName).Hash.ToLower()
            $relativePath = $_.FullName.Replace("$bundleDir\", "")
            "$hash  $relativePath" | Out-File -Append -Encoding utf8 $sha512File
          }

          Write-Host "Checksums generated successfully"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "Oxide Pilot ${{ steps.tag.outputs.version }} (${{ steps.tag.outputs.tag }})"
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          generate_release_notes: true
          body: |
            # Oxide Pilot - Automated Release

            **Version:** ${{ steps.tag.outputs.version }}
            **Tag:** ${{ steps.tag.outputs.tag }}
            **Commit:** ${{ github.sha }}

            ## Installation

            Download the appropriate installer for your platform:
            - **Windows x64**: Download the `.msi` or `.exe` installer

            ## Verification

            Verify the integrity of downloaded files using the provided checksums:
            - `CHECKSUMS-md5.txt` - MD5 hashes
            - `CHECKSUMS-sha256.txt` - SHA256 hashes
            - `CHECKSUMS-sha512.txt` - SHA512 hashes

            ## What's Changed

            This release was automatically generated from the latest commit to the main branch.

            ---

            **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.tag.outputs.tag }}
          files: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/CHECKSUMS-*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

