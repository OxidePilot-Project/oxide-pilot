name: Automated Release

on:
  push:
    branches: [main]
    tags:
      - 'v*'
      - 'bootstrap-*'
  workflow_dispatch:
    inputs:
      skip_validation:
        description: 'Skip validation workflow (not recommended)'
        required: false
        default: 'false'

permissions:
  contents: write
  issues: write
  checks: write
  packages: write
  actions: read

jobs:
  validation:
    if: github.event_name != 'workflow_dispatch' || inputs.skip_validation != 'true'
    uses: ./.github/workflows/validate-core.yml
    secrets: inherit

  build-and-release-windows:
    runs-on: windows-latest
    needs: validation
    if: needs.validation.result == 'success' || needs.validation.result == 'skipped'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Install NSIS & WiX
        run: |
          choco install nsis -y
          choco install wixtoolset -y

      - name: Generate icons (if logo.png exists)
        shell: pwsh
        run: |
          if (Test-Path logo.png) {
            Push-Location src-tauri
            python create_icon.py
            Pop-Location
          } else {
            Write-Host "logo.png not present; skipping icon generation"
          }

      - name: Build frontend
        run: |
          npm --prefix src-frontend ci
          npm --prefix src-frontend run build

      - name: Tauri bundle (NSIS/MSI)
        run: |
          Push-Location src-tauri
          cargo tauri build --verbose
          Pop-Location

      - name: Collect artifacts
        id: collect
        shell: pwsh
        run: |
          $bundleDir = "src-tauri/target/release/bundle"
          "bundle_dir=$bundleDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Get-ChildItem -Path $bundleDir -Recurse

      - name: Code sign installers
        shell: pwsh
        env:
          SIGN_PFX_BASE64: ${{ secrets.SIGN_PFX_BASE64 }}
          SIGN_PFX_PASSWORD: ${{ secrets.SIGN_PFX_PASSWORD }}
          SIGN_TS_URL: ${{ secrets.SIGN_TS_URL }}
          BUNDLE_DIR: ${{ steps.collect.outputs.bundle_dir }}
        run: |
          if ($env:SIGN_PFX_BASE64) {
            $pfx = Join-Path $env:RUNNER_TEMP 'codesign.pfx'
            [IO.File]::WriteAllBytes($pfx, [Convert]::FromBase64String($env:SIGN_PFX_BASE64))
            $timestamp = if ($env:SIGN_TS_URL) { $env:SIGN_TS_URL } else { 'http://timestamp.digicert.com' }
            Write-Host "Signing binaries under $env:BUNDLE_DIR"
            Get-ChildItem -Path $env:BUNDLE_DIR -Include *.exe,*.msi -Recurse | ForEach-Object {
              Write-Host "Signing $($_.FullName)"
              signtool sign /f $pfx /p $env:SIGN_PFX_PASSWORD /tr $timestamp /td sha256 /fd sha256 $_.FullName
              if ($LASTEXITCODE -ne 0) {
                throw "Failed to sign $($_.FullName)"
              }
            }
            Write-Host "Code signing completed"
          } else {
            Write-Host "Code signing skipped: SIGN_PFX_BASE64 not configured"
          }

      - name: Generate release tag
        id: tag
        shell: pwsh
        run: |
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $version = (Get-Content src-tauri/Cargo.toml | Select-String 'version = "(.+)"').Matches.Groups[1].Value
          $commitShort = git rev-parse --short HEAD

          if ($env:GITHUB_REF -like "refs/tags/*") {
            $tag = $env:GITHUB_REF -replace "refs/tags/", ""
          } else {
            $tag = "bootstrap-$timestamp-$commitShort"
          }

          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Generated tag: $tag"

      - name: Generate checksums
        shell: pwsh
        run: |
          $bundleDir = "src-tauri/target/release/bundle"

          Get-ChildItem -Path $bundleDir -Include CHECKSUMS-*.txt -Recurse | Remove-Item -Force -ErrorAction SilentlyContinue

          $hashAlgorithms = @("MD5","SHA256","SHA512")
          foreach ($algo in $hashAlgorithms) {
            $fileName = "CHECKSUMS-$($algo.ToLower()).txt"
            $output = Join-Path $bundleDir $fileName
            Get-ChildItem -Path $bundleDir -Include *.exe,*.msi -Recurse | ForEach-Object {
              $hash = (Get-FileHash -Algorithm $algo $_.FullName).Hash.ToLower()
              $relativePath = $_.FullName.Replace("$bundleDir\", "")
              "$hash  $relativePath" | Out-File -Append -Encoding utf8 $output
            }
            Write-Host "$algo checksums written to $fileName"
          }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "Oxide Pilot ${{ steps.tag.outputs.version }} (${{ steps.tag.outputs.tag }})"
          draft: false
          prerelease: ${{ !startsWith(steps.tag.outputs.tag, 'v') }}
          generate_release_notes: true
          body: |
            # Oxide Pilot - Automated Release

            **Version:** ${{ steps.tag.outputs.version }}
            **Tag:** ${{ steps.tag.outputs.tag }}
            **Commit:** ${{ github.sha }}

            ## Installation
            Download the appropriate installer for your platform:
            - Windows x64: use the `.msi` or `.exe` packages

            ## Verification
            Checksums are provided alongside the installers:
            - `CHECKSUMS-md5.txt`
            - `CHECKSUMS-sha256.txt`
            - `CHECKSUMS-sha512.txt`

            ## Notes
            This release was generated automatically after all validation jobs succeeded on the main branch.

            ---

            **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.tag.outputs.tag }}
          files: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/CHECKSUMS-*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
